FROM mcr.microsoft.com/dotnet/sdk:8.0

WORKDIR /src

ENV DOTNET_CLI_TELEMETRY_OPTOUT=1 \
	NUGET_PACKAGES=/root/.nuget/packages \
	DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1

# Install OS packages required by Playwright browsers + wait tooling
RUN apt-get update \
	&& apt-get install -y --no-install-recommends \
	   ca-certificates \
	   gnupg \
	   curl \
	   wget \
	   unzip \
	   xvfb \
	   libnss3 \
	   libatk1.0-0 \
	   libatk-bridge2.0-0 \
	   libc6 \
	   libcairo2 \
	   libdbus-1-3 \
	   libexpat1 \
	   libgbm1 \
	   libglib2.0-0 \
	   libgtk-3-0 \
	   libx11-6 \
	   libxcomposite1 \
	   libxdamage1 \
	   libxrandr2 \
	   libasound2 \
	&& rm -rf /var/lib/apt/lists/*

# Install PowerShell (for playwright.ps1 scripts)
RUN apt-get update \
	&& apt-get install -y --no-install-recommends ca-certificates apt-transport-https software-properties-common \
	&& wget -q https://packages.microsoft.com/config/debian/12/packages-microsoft-prod.deb -O packages-microsoft-prod.deb \
	&& dpkg -i packages-microsoft-prod.deb \
	&& apt-get update \
	&& apt-get install -y --no-install-recommends powershell \
	&& rm -rf /var/lib/apt/lists/* packages-microsoft-prod.deb

# Copy solution + projects explicitly (improves layer caching)
COPY DotNetApp.sln ./
COPY src ./src
COPY tests ./tests

# Restore only the E2E test project (pulls transitive dependencies) but only when RunE2E is enabled.
# This keeps the image lightweight for non-E2E scenarios and avoids triggering Playwright tooling during workspace/test runs.
ARG RUN_E2E=0
ENV RUN_E2E=${RUN_E2E}

RUN if [ "${RUN_E2E}" = "1" ]; then \
			dotnet restore tests/DotNetApp.Tests.E2E/DotNetApp.Tests.E2E.csproj /p:RunE2E=true; \
		else echo "Skipping E2E restore (RUN_E2E=${RUN_E2E})"; fi

RUN if [ "${RUN_E2E}" = "1" ]; then \
			dotnet build --no-restore -c Debug tests/DotNetApp.Tests.E2E/DotNetApp.Tests.E2E.csproj /p:RunE2E=true; \
		else echo "Skipping E2E build (RUN_E2E=${RUN_E2E})"; fi

# Install playwright browsers (using the generated script) only when enabled
RUN if [ "${RUN_E2E}" = "1" ]; then \
			pwsh -NoLogo -NoProfile -ExecutionPolicy Bypass -Command "& tests/DotNetApp.Tests.E2E/bin/Debug/net8.0/playwright.ps1 install --with-deps"; \
		else echo "Skipping Playwright browser install (RUN_E2E=${RUN_E2E})"; fi

# Add a lightweight wait script & test runner
RUN echo '#!/usr/bin/env bash' > /usr/local/bin/run-e2e.sh \
	&& echo 'set -euo pipefail' >> /usr/local/bin/run-e2e.sh \
	&& echo 'FRONTEND_URL=${FRONTEND_URL:-http://client:80}' >> /usr/local/bin/run-e2e.sh \
	&& echo 'echo "Waiting for frontend at $FRONTEND_URL ..."' >> /usr/local/bin/run-e2e.sh \
	&& echo 'for i in {1..60}; do' >> /usr/local/bin/run-e2e.sh \
	&& echo '  if curl -fsSL "$FRONTEND_URL" >/dev/null 2>&1; then echo "Frontend is up"; break; fi' >> /usr/local/bin/run-e2e.sh \
	&& echo '  sleep 1' >> /usr/local/bin/run-e2e.sh \
	&& echo '  if [ "$i" -eq 60 ]; then echo "Frontend did not become ready in time"; exit 1; fi' >> /usr/local/bin/run-e2e.sh \
	&& echo 'done' >> /usr/local/bin/run-e2e.sh \
	&& echo 'echo Running E2E tests...' >> /usr/local/bin/run-e2e.sh \
	&& echo 'dotnet test --no-build --logger "trx;LogFileName=TestResults.trx" /src/tests/DotNetApp.Tests.E2E/DotNetApp.Tests.E2E.csproj' >> /usr/local/bin/run-e2e.sh \
	&& chmod +x /usr/local/bin/run-e2e.sh

WORKDIR /src/tests/DotNetApp.Tests.E2E

# Default command keeps container idle (so you can exec to run tests) unless RUN_E2E=1
CMD ["bash", "-lc", "if [ \"${RUN_E2E:-0}\" = 1 ]; then /usr/local/bin/run-e2e.sh; else echo 'E2E test container ready. Exec run-e2e.sh or set RUN_E2E=1.' && tail -f /dev/null; fi"]
