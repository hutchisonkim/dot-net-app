## Build stage (publish Blazor WASM)
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# Copy csproj files (Client + Core) and restore for better cache behavior
COPY src/DotNetApp.Core/DotNetApp.Core.csproj src/DotNetApp.Core/
COPY src/DotNetApp.Client/DotNetApp.Client.csproj src/DotNetApp.Client/
RUN dotnet restore "src/DotNetApp.Client/DotNetApp.Client.csproj"

# Copy remaining sources
COPY . .

RUN dotnet publish "src/DotNetApp.Client/DotNetApp.Client.csproj" -c Release -o /app/publish

# Nginx stage (serve the generated wwwroot)
FROM nginx:alpine
## Copy the *contents* of the published wwwroot into nginx's html root.
## Using the trailing slash ensures files are placed directly under /usr/share/nginx/html
COPY --from=build /app/publish/wwwroot/ /usr/share/nginx/html/
## If the publish output ended up as /usr/share/nginx/html/wwwroot, move its
## contents into the document root so nginx serves the Blazor index at /
RUN if [ -d /usr/share/nginx/html/wwwroot ]; then \
			cp -a /usr/share/nginx/html/wwwroot/. /usr/share/nginx/html/ || true; \
			rm -rf /usr/share/nginx/html/wwwroot || true; \
		fi

## Install provided nginx config which proxies /api to backend
COPY src/DotNetApp.Client/nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
