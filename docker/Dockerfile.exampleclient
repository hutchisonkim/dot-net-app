## Build stage (publish Example Blazor WASM)
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# Copy csproj files needed for restore (Core + ExampleClient)
COPY src/DotNetApp.Core/DotNetApp.Core.csproj src/DotNetApp.Core/
COPY examples/ExampleClient/ExampleClient.csproj examples/ExampleClient/
RUN dotnet restore "examples/ExampleClient/ExampleClient.csproj"

# Copy the remaining repository sources
COPY . .

# Publish the ExampleClient (produces wwwroot in publish output)
RUN dotnet publish "examples/ExampleClient/ExampleClient.csproj" -c Release -o /app/publish

# Runtime stage: nginx serving static Blazor assets and proxying /api to backend
FROM nginx:alpine

# Copy the published static site content into nginx html root
COPY --from=build /app/publish/wwwroot/ /usr/share/nginx/html/

# If publish output nested an extra wwwroot folder, normalize it
RUN if [ -d /usr/share/nginx/html/wwwroot ]; then \
      cp -a /usr/share/nginx/html/wwwroot/. /usr/share/nginx/html/ || true; \
      rm -rf /usr/share/nginx/html/wwwroot || true; \
    fi

# Reuse existing nginx config from main client (contains /api proxy rules)
COPY src/DotNetApp.Client/nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
