name: CI

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      useSelfHosted:
        description: "Run tests on self-hosted WSL runner instead of ubuntu-latest"
        required: false
        default: "true"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    # Force tests to run on the self-hosted runner only
    runs-on: self-hosted
    env:
      HOME: /home/ghrunner
      DOTNET_ROOT: /home/ghrunner/.dotnet
      DOTNET_CLI_HOME: /home/ghrunner/.dotnet
      NUGET_PACKAGES: /home/ghrunner/.nuget/packages
      PLAYWRIGHT_BROWSERS_PATH: /home/ghrunner/.cache/ms-playwright
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: non-e2e
            runE2E: false
            testFilter: 'Category!=E2E'
          - name: full-e2e
            runE2E: true
            testFilter: ''
    name: tests-${{ matrix.name }}
    steps:
      - name: Prepare user tool/cache directories (Linux self-hosted only)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          mkdir -p "$HOME/.dotnet" "$HOME/.nuget/packages" "$HOME/.cache/ms-playwright" "$HOME/.dotnet/tools"
          # Prepend user dotnet tool paths to PATH for subsequent steps in this job
          echo "PATH=/home/ghrunner/.dotnet:/home/ghrunner/.dotnet/tools:$PATH" >> $GITHUB_ENV
          echo "Ensured tool/cache directories with ownership:";
          ls -ld "$HOME/.dotnet" "$HOME/.nuget" "$HOME/.cache/ms-playwright"
      - name: Runner Context Debug
        run: |
          echo "event_name=${{ github.event_name }}"
          echo "workflow_dispatch.useSelfHosted='${{ github.event.inputs.useSelfHosted }}' (coalesced to '${{ github.event.inputs.useSelfHosted || 'true' }}')"
          echo "Selected runs-on expression -> ${{ github.event_name == 'workflow_dispatch' && ((github.event.inputs.useSelfHosted || 'true') == 'true') && 'self-hosted' || 'ubuntu-latest' }}"
          echo "Runner name=$RUNNER_NAME os=$RUNNER_OS arch=$RUNNER_ARCH"
          echo "Job id=${{ github.job }} ref=${{ github.ref }} sha=${{ github.sha }}"
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore DotNetApp.sln

      - name: Build
        run: dotnet build DotNetApp.sln --configuration Release --no-restore

      - name: Install Playwright Browsers (E2E)
        if: matrix.runE2E == true
        shell: bash
        run: pwsh tests/DotNetApp.E2ETests/bin/Release/net8.0/playwright.ps1 install

      - name: Test (non-E2E with coverage)
        if: matrix.runE2E == false
        run: |
          # Default CI/test matrix excludes E2E tests via the Category!=E2E filter.
          dotnet test DotNetApp.sln --configuration Release --no-build \
            --collect "XPlat Code Coverage" \
            --filter "${{ matrix.testFilter }}" --logger trx

      - name: Test (full including E2E)
        if: matrix.runE2E == true && github.ref == 'refs/heads/main'
        run: |
          # Run regular tests (non-E2E) first
          dotnet test DotNetApp.sln --configuration Release --no-build --logger trx --filter "Category!=E2E"
          # Then run E2E project explicitly with RunE2E enabled so it can load Playwright and browsers
          dotnet test tests/DotNetApp.E2ETests/DotNetApp.E2ETests.csproj --configuration Release --no-build --logger trx /p:RunE2E=true

      - name: Skip E2E on PR (informational)
        if: matrix.runE2E == true && github.ref != 'refs/heads/main'
        run: echo "Skipping E2E run for non-main ref $GITHUB_REF"

      - name: Install ReportGenerator (coverage matrix only)
        if: matrix.runE2E == false
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate Coverage Report
        if: matrix.runE2E == false
        env:
          PATH: $HOME/.dotnet/tools:${{ env.PATH }}
        run: |
          REPORT_DIR=coverage-report
          mkdir -p $REPORT_DIR
          FILES=$(find . -type f -name 'coverage.cobertura.xml' -printf '%p;')
          echo "Found cobertura files: $FILES"
          if [ -z "$FILES" ]; then echo "No coverage.cobertura.xml files found"; exit 1; fi
          reportgenerator \
            -reports:"${FILES}" \
            -targetdir:"$REPORT_DIR" \
            -reporttypes:Html;MarkdownSummaryGithub;Badges;TextSummary \
            -title:"DotNetApp Coverage"
          echo "Coverage report generated at $REPORT_DIR/index.html"

      - name: Extract Coverage Metrics
        if: matrix.runE2E == false
        id: coverage_metrics
        shell: bash
        run: |
          SUMMARY=coverage-report/Summary.txt
          if [ ! -f "$SUMMARY" ]; then echo "Summary file not found"; exit 1; fi
          LINE=$(grep -Po 'Line coverage[^0-9]*\K[0-9]+(?=%)' "$SUMMARY" | head -1 || echo 0)
          BRANCH=$(grep -Po 'Branch coverage[^0-9]*\K[0-9]+(?=%)' "$SUMMARY" | head -1 || echo 0)
          echo "Line: $LINE%  Branch: $BRANCH%"
          echo "line=$LINE" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Enforce Coverage Thresholds
        if: matrix.runE2E == false
        shell: bash
        run: |
          LINE=${{ steps.coverage_metrics.outputs.line }}
          BRANCH=${{ steps.coverage_metrics.outputs.branch }}
          : "${MIN_LINE_COVERAGE:=80}"
          : "${MIN_BRANCH_COVERAGE:=70}"
          MIN_LINE=$MIN_LINE_COVERAGE
          MIN_BRANCH=$MIN_BRANCH_COVERAGE
          echo "Line coverage: $LINE% (min $MIN_LINE%)"; echo "Branch coverage: $BRANCH% (min $MIN_BRANCH%)";
          if [ -z "$LINE" ] || [ -z "$BRANCH" ]; then echo "Missing coverage metrics"; exit 1; fi
          if [ "$LINE" -lt "$MIN_LINE" ] || [ "$BRANCH" -lt "$MIN_BRANCH" ]; then
            echo "Coverage below threshold (Line>=$MIN_LINE, Branch>=$MIN_BRANCH)"; exit 1; fi
          echo "Coverage thresholds satisfied."

      - name: Upload Coverage Artifact
        if: matrix.runE2E == false
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report

      - name: Publish Coverage Summary (PR)
        if: matrix.runE2E == false && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summaryPath = 'coverage-report/SummaryGithub.md';
            if (fs.existsSync(summaryPath)) {
              const body = fs.readFileSync(summaryPath, 'utf8');
              github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              });
            } else {
              core.warning('Coverage summary not found');
            }

      - name: Expose Badge Artifact
        if: matrix.runE2E == false && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badges
          path: coverage-report/badge_*.*

  deploy-coverage:
    needs: test
    if: github.ref == 'refs/heads/main'
    # Deploy steps run on the self-hosted runner only
    runs-on: self-hosted
    permissions:
      pages: write
      id-token: write
      contents: read
    # Environment block removed; Pages URL will appear in deployment output
    steps:
      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage-report
      - name: Verify coverage artifact
        run: |
          if [ ! -f coverage-report/index.html ]; then echo "coverage-report/index.html missing"; ls -R coverage-report || true; exit 1; fi
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: coverage-report
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
