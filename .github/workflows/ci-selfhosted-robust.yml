name: CI Self-hosted Robust Non-E2E

on:
  workflow_dispatch:
    inputs:
      testFilter:
        description: 'dotnet test filter (e.g. "TestCategory=E2E" or "TestCategory!=E2E")'
        required: false
        default: ''

permissions:
  contents: read

jobs:
  build-and-test:
    name: Build and test (self-hosted)
    runs-on: [self-hosted, linux]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
          key: nuget-cache-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-cache-${{ runner.os }}-

      - name: Cache dotnet install directory
        uses: actions/cache@v4
        with:
          path: |
            $HOME/.dotnet
          key: dotnet-cache-${{ runner.os }}-8.0-${{ hashFiles('global.json') }}
          restore-keys: |
            dotnet-cache-${{ runner.os }}-8.0-

      - name: Install dotnet locally (robust, try IPv4 then fallback)
        shell: bash
        run: |
          set -euo pipefail
          DOTNET_DIR="$HOME/.dotnet"
          echo "Installing dotnet locally to $DOTNET_DIR (try IPv4 then fallback)"
          mkdir -p "$DOTNET_DIR"
          # prefer IPv4; if that fails, fallback to default
          if curl --ipv4 --retry 5 -fsSLo dotnet-install.sh https://dot.net/v1/dotnet-install.sh; then
            echo "Downloaded installer via IPv4"
            bash dotnet-install.sh --channel 8.0 --install-dir "$DOTNET_DIR" --no-path || true
          else
            echo "IPv4 download failed, trying normal download"
            curl --retry 5 -fsSLo dotnet-install.sh https://dot.net/v1/dotnet-install.sh
            bash dotnet-install.sh --channel 8.0 --install-dir "$DOTNET_DIR" --no-path || true
          fi
          echo "DOTNET_ROOT=$DOTNET_DIR" >> "$GITHUB_ENV"
          echo "$DOTNET_DIR" >> "$GITHUB_PATH"

      - name: Verify dotnet
        shell: bash
        run: |
          echo "--- dotnet --info ---"
          dotnet --info || true

      - name: Warm up NuGet cache (dotnet restore)
        shell: bash
        run: |
          echo "Warming NuGet cache with dotnet restore"
          dotnet restore DotNetApp.sln --verbosity minimal || true

      - name: Run tests (parameterized)
        shell: bash
        env:
          TEST_FILTER: "${{ inputs.testFilter }}"
        run: |
          # If no test filter provided, default to skipping E2E tests
          if [ -z "${TEST_FILTER}" ]; then
            FILTER='TestCategory!=E2E'
          else
            FILTER="${TEST_FILTER}"
          fi
          echo "Running dotnet test with filter: $FILTER"
          dotnet test DotNetApp.sln --verbosity minimal --filter "$FILTER"
