name: CI Self-hosted Robust

on:
  workflow_dispatch:
    inputs:
      test_filter:
        description: 'Filter expression for tests, e.g. "Category==E2E" or "Category!=E2E"'
        required: false
        default: 'Category!=E2E'

permissions:
  contents: read

jobs:
  build-and-test:
    name: Build and test (self-hosted)
    runs-on: [self-hosted, linux]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
          key: nuget-cache-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-cache-${{ runner.os }}-

      - name: Cache dotnet install directory
        uses: actions/cache@v4
        with:
          path: |
            $HOME/.dotnet
          key: dotnet-cache-${{ runner.os }}-8.0-${{ hashFiles('global.json') }}
          restore-keys: |
            dotnet-cache-${{ runner.os }}-8.0-

      - name: Ensure dotnet 8 is available (use existing or attempt installer)
        shell: bash
        run: |
          set -euo pipefail
          if command -v dotnet >/dev/null 2>&1; then
            ver=$(dotnet --version || true)
            echo "dotnet found on PATH: $ver"
            # if it's not 8.x, still continue but warn
            if [[ "$ver" != 8.* ]]; then
              echo "Warning: dotnet version $ver found; recommended: .NET 8.x for CI builds"
            fi
          else
            echo "dotnet not found on runner; attempting to download installer (requires outbound network access)"
            DOTNET_DIR="$HOME/.dotnet"
            mkdir -p "$DOTNET_DIR"
            # try IPv4 first, then fallback to default
            if curl --ipv4 --retry 5 -fsSLo dotnet-install.sh https://dot.net/v1/dotnet-install.sh; then
              echo "Downloaded installer via IPv4"
              bash dotnet-install.sh --channel 8.0 --install-dir "$DOTNET_DIR" --no-path || true
            else
              echo "IPv4 download failed; trying normal download"
              if curl --retry 5 -fsSLo dotnet-install.sh https://dot.net/v1/dotnet-install.sh; then
                bash dotnet-install.sh --channel 8.0 --install-dir "$DOTNET_DIR" --no-path || true
              else
                echo "Failed to download dotnet installer. This self-hosted runner may not have outbound HTTPS access to dot.net." >&2
                echo "Options: (1) preinstall .NET 8 on the runner, (2) allow outbound access to https://dot.net and https://builds.dotnet.microsoft.com." >&2
                exit 1
              fi
            fi
            echo "DOTNET_ROOT=$DOTNET_DIR" >> "$GITHUB_ENV"
            echo "$DOTNET_DIR" >> "$GITHUB_PATH"
          fi

      - name: Verify dotnet
        shell: bash
        run: |
          echo "--- dotnet --info ---"
          dotnet --info || true

      - name: Warm up NuGet cache (dotnet restore)
        shell: bash
        run: |
          echo "Warming NuGet cache with dotnet restore"
          dotnet restore DotNetApp.sln --verbosity minimal || true

      - name: Start services with docker compose (CI)
        shell: bash
        run: |
          echo "Attempting to start docker compose stack for CI (if available)"
          # Temporarily disable 'errexit' so a missing docker binary doesn't kill the step
          set +e
          command -v docker >/dev/null 2>&1
          has_docker=$?
          set -e
          if [ "$has_docker" -eq 0 ]; then
            echo "docker found, bringing up compose stack"
            # run docker compose but don't fail the step if it errors
            set +e
            docker compose -f docker/compose.ci.yml up -d
            dc_exit=$?
            set -e
            if [ $dc_exit -ne 0 ]; then
              echo "docker compose returned $dc_exit; continuing and relying on test fixture fallback"
            fi

            # wait briefly for frontend at http://localhost:8080/ to become available
            for i in {1..30}; do
              if curl -sSf http://localhost:8080/ >/dev/null 2>&1; then
                echo "frontend reachable"
                echo "FRONTEND_URL=http://localhost:8080/" >> "$GITHUB_ENV"
                break
              fi
              echo "waiting for frontend ($i)..."
              sleep 1
            done
            if ! grep -qE '^FRONTEND_URL=' "$GITHUB_ENV" 2>/dev/null; then
              echo "docker-compose started (or attempted) but frontend not reachable; tests will use in-test fallback if available"
            fi
          else
            echo "docker not found on runner; skipping docker compose. Tests will use in-test fallback fixture to serve static files."
          fi

      - name: Run tests
        shell: bash
        run: |
          dotnet test DotNetApp.sln --filter "${{ github.event.inputs.test_filter }}"
