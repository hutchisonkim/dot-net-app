name: CI Non-E2E

on:
  workflow_dispatch:
    inputs:
      useSelfHosted:
        description: "Run tests on self-hosted runner instead of ubuntu-latest"
        required: false
        default: "true"

jobs:
  test:
    name: non-e2e-tests
    runs-on: ${{ github.event_name == 'workflow_dispatch' && ((github.event.inputs.useSelfHosted || 'true') == 'true') && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - name: Runner diagnostic (save to file)
        shell: bash
        run: |
          echo "---- Runner info ----" > runner-diagnostics.txt
          uname -a >> runner-diagnostics.txt 2>&1 || true
          echo "RUNNER_NAME=$RUNNER_NAME" >> runner-diagnostics.txt
          echo "RUNNER_OS=$RUNNER_OS" >> runner-diagnostics.txt
          echo "HOME=$HOME" >> runner-diagnostics.txt
          echo "---- Tool locations ----" >> runner-diagnostics.txt
          command -v dotnet >> runner-diagnostics.txt 2>&1 || true
          command -v pwsh >> runner-diagnostics.txt 2>&1 || true
          command -v curl >> runner-diagnostics.txt 2>&1 || true
          command -v tar >> runner-diagnostics.txt 2>&1 || true
          command -v unzip >> runner-diagnostics.txt 2>&1 || true
          ls -ld "$HOME" >> runner-diagnostics.txt 2>&1 || true

      - name: Upload runner diagnostics
        uses: actions/upload-artifact@v4
        with:
          name: runner-diagnostics
          path: runner-diagnostics.txt

      - name: Network diagnostics (curl verbose)
        shell: bash
        run: |
          echo "---- curl verbose to dot.net ----" > network-diagnostics.txt
          curl -vI https://dot.net >> network-diagnostics.txt 2>&1 || true
          echo "---- curl verbose to builds.dotnet.microsoft.com ----" >> network-diagnostics.txt
          curl -vI https://builds.dotnet.microsoft.com >> network-diagnostics.txt 2>&1 || true
          echo "---- curl fetch dotnet-install.sh (verbose) ----" >> network-diagnostics.txt
          curl -vS https://dot.net/v1/dotnet-install.sh -o /tmp/dotnet-install.sh >> network-diagnostics.txt 2>&1 || true

      - name: Upload network diagnostics
        uses: actions/upload-artifact@v4
        with:
          name: network-diagnostics
          path: network-diagnostics.txt

      - name: Deep network & TLS diagnostics
        shell: bash
        run: |
          set +e
          out=network-deep.txt
          echo "==== Deep network & TLS diagnostics ====" > "$out"
          echo "Date: $(date -u)" >> "$out"
          echo "---- Environment proxies ----" >> "$out"
          env | grep -i proxy >> "$out" 2>&1 || true
          echo "---- /etc/hosts ----" >> "$out"
          cat /etc/hosts >> "$out" 2>&1 || true
          echo "---- /etc/resolv.conf ----" >> "$out"
          cat /etc/resolv.conf >> "$out" 2>&1 || true
          echo "---- DNS resolution (getent / host / nslookup) ----" >> "$out"
          getent hosts builds.dotnet.microsoft.com >> "$out" 2>&1 || true
          host builds.dotnet.microsoft.com >> "$out" 2>&1 || true
          nslookup builds.dotnet.microsoft.com >> "$out" 2>&1 || true
          which dig >/dev/null 2>&1 && dig +short builds.dotnet.microsoft.com >> "$out" 2>&1 || true
          echo "---- traceroute / tracepath ----" >> "$out"
          which traceroute >/dev/null 2>&1 && traceroute -n builds.dotnet.microsoft.com >> "$out" 2>&1 || tracepath builds.dotnet.microsoft.com >> "$out" 2>&1 || true
          echo "---- ip route / ip addr ----" >> "$out"
          ip route >> "$out" 2>&1 || route -n >> "$out" 2>&1 || true
          ip addr >> "$out" 2>&1 || true
          echo "---- socket/listening info (ss/netstat) ----" >> "$out"
          ss -tn >> "$out" 2>&1 || netstat -tn >> "$out" 2>&1 || true

          echo "---- Attempt TLS connection with openssl ----" >> "$out"
          which openssl >/dev/null 2>&1 && openssl s_client -connect builds.dotnet.microsoft.com:443 -servername builds.dotnet.microsoft.com -brief < /dev/null >> "$out" 2>&1 || true

          echo "---- curl tests (ipv4/ipv6/connect-to/tls1.2) ----" >> "$out"
          curl -vI --ipv4 https://builds.dotnet.microsoft.com >> "$out" 2>&1 || true
          curl -vI --ipv6 https://builds.dotnet.microsoft.com >> "$out" 2>&1 || true
          # try resolving an IP and using --connect-to to bypass DNS routing
          IP=$(getent hosts builds.dotnet.microsoft.com | awk '{print $1; exit}')
          if [ -n "$IP" ]; then
            echo "Resolved IP=$IP" >> "$out"
            curl -v --connect-to builds.dotnet.microsoft.com:443:${IP}:443 https://builds.dotnet.microsoft.com/ >> "$out" 2>&1 || true
          else
            echo "No IP resolved via getent" >> "$out"
          fi
          curl -v --tls-max 1.2 https://builds.dotnet.microsoft.com >> "$out" 2>&1 || true

          echo "---- End diagnostics ----" >> "$out"

      - name: Upload deep network diagnostics
        uses: actions/upload-artifact@v4
        with:
          name: network-deep
          path: network-deep.txt

      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache dotnet install directory
        uses: actions/cache@v4
        with:
          path: |
            $HOME/.dotnet
          key: dotnet-cache-${{ runner.os }}-8.0-${{ hashFiles('global.json') }}
          restore-keys: |
            dotnet-cache-${{ runner.os }}-8.0-

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
          key: nuget-cache-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-cache-${{ runner.os }}-

      - name: Install .NET into user directory (IPv4-first, cached)
        shell: bash
        run: |
          set -euo pipefail
          DOTNET_DIR="$HOME/.dotnet"
          echo "Installing dotnet to $DOTNET_DIR (IPv4-first, cached)"
          mkdir -p "$DOTNET_DIR"
          # Try IPv4 download first, fall back to default if needed
          if curl --ipv4 --retry 5 -fsSLo dotnet-install.sh https://dot.net/v1/dotnet-install.sh; then
            echo "Downloaded installer via IPv4"
            bash dotnet-install.sh --channel 8.0 --install-dir "$DOTNET_DIR" --no-path || true
          else
            echo "IPv4 download failed, trying default download"
            curl --retry 5 -fsSLo dotnet-install.sh https://dot.net/v1/dotnet-install.sh
            bash dotnet-install.sh --channel 8.0 --install-dir "$DOTNET_DIR" --no-path || true
          fi
          echo "DOTNET_ROOT=$DOTNET_DIR" >> "$GITHUB_ENV"
          echo "$DOTNET_DIR" >> "$GITHUB_PATH"

      - name: Warm up NuGet cache (dotnet restore)
        shell: bash
        run: |
          echo "Warming NuGet cache with dotnet restore"
          dotnet restore DotNetApp.sln --verbosity minimal || true

      - name: Build
        run: dotnet build DotNetApp.sln --configuration Release --no-restore

      - name: Test (non-E2E)
        run: |
          dotnet test DotNetApp.sln --configuration Release --no-build --filter "Category!=E2E" --logger trx
