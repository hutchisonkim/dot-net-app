name: Test and Publish Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

env:
  DOTNET_VERSION: 8.0.x

jobs:
  test-and-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Run tests with coverage
        run: |
          dotnet test --collect:"XPlat Code Coverage" --results-directory ./TestResults

      - name: Aggregate coverage summary
        run: pwsh -NoProfile -ExecutionPolicy Bypass -File ./scripts/aggregate_coverage.ps1

      - name: Generate enhanced HTML coverage report
        run: |
          python3 - <<'PY'
          import json
          from pathlib import Path

          summary_path = Path('artifacts/coverage-files/coverage-summary.json')
          out_dir = Path('coverage-report')
          out_dir.mkdir(parents=True, exist_ok=True)
          if not summary_path.exists():
              print('coverage-summary.json not found')
              raise SystemExit(1)

          data = json.loads(summary_path.read_text())
          files = data.get('files', [])
          averages = data.get('averages', {})

          # aggregated totals (sum across files) if present
          total_lines_covered = sum(f.get('linesCovered', 0) for f in files)
          total_lines_valid = sum(f.get('linesValid', 0) for f in files)
          total_lines_uncovered = total_lines_valid - total_lines_covered
          total_lines = total_lines_valid

          total_branches_covered = sum(f.get('branchesCovered', 0) for f in files)
          total_branches_valid = sum(f.get('branchesValid', 0) for f in files)

          line_cov = (total_lines_covered / total_lines_valid * 100) if total_lines_valid else averages.get('lineRatePercent', 0)
          branch_cov = (total_branches_covered / total_branches_valid * 100) if total_branches_valid else averages.get('branchRatePercent', 0)

          line_cov = round(line_cov, 2)
          branch_cov = round(branch_cov, 2)

          html = f'''<!doctype html>
          <html lang="en">
          <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width,initial-scale=1" />
            <title>Coverage Report</title>
            <style>
              body {{ font-family: system-ui, Segoe UI, Roboto, Helvetica, Arial; margin: 2rem; color: #222; }}
              h1 {{ margin-bottom: 0.5rem; }}
              .metric {{ margin-bottom: 1.2rem; }}
              .label {{ font-weight: bold; display: inline-block; width: 180px; }}
              .bar {{ height: 18px; background: #ddd; border-radius: 9px; overflow: hidden; width: 300px; display: inline-block; vertical-align: middle; margin-left: 0.5rem; }}
              .fill {{ height: 100%; background: #4caf50; }}
              .small {{ color: #666; font-size: 0.9em; }}
              table {{ border-collapse: collapse; margin-top: 1rem; }}
              td, th {{ padding: 6px 8px; border: 1px solid #ddd; }}
            </style>
          </head>
          <body>
            <h1>Coverage Report</h1>
            <div class="metric">
              <span class="label">Covered lines:</span>
              <span>{total_lines_covered}</span>
            </div>
            <div class="metric">
              <span class="label">Uncovered lines:</span>
              <span>{total_lines_uncovered}</span>
            </div>
            <div class="metric">
              <span class="label">Coverable lines:</span>
              <span>{total_lines_valid}</span>
            </div>
            <div class="metric">
              <span class="label">Total lines:</span>
              <span>{total_lines}</span>
            </div>
            <div class="metric">
              <span class="label">Line coverage:</span>
              <span>{line_cov}%</span>
              <div class="bar"><div class="fill" style="width:{line_cov}%"></div></div>
            </div>

            <div class="metric">
              <span class="label">Covered branches:</span>
              <span>{total_branches_covered}</span>
            </div>
            <div class="metric">
              <span class="label">Total branches:</span>
              <span>{total_branches_valid}</span>
            </div>
            <div class="metric">
              <span class="label">Branch coverage:</span>
              <span>{branch_cov}%</span>
              <div class="bar"><div class="fill" style="width:{branch_cov}%"></div></div>
            </div>

            <hr />
            <p class="small">Generated from <code>artifacts/coverage-files/coverage-summary.json</code>.</p>
          </body>
          </html>'''

          (out_dir / 'index.html').write_text(html)
          print('Wrote coverage report to', out_dir / 'index.html')
          PY

      - name: Upload coverage report as Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./coverage-report

  deploy:
    needs: test-and-report
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
