name: Test and Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

env:
  DOTNET_VERSION: 8.0.x

jobs:
  test-and-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Run tests with coverage
        run: |
          dotnet test --collect:"XPlat Code Coverage" --results-directory ./TestResults

      - name: Run UI tests and generate screenshots
        run: |
          dotnet test tests/Examples.Tests.UI --no-build --verbosity normal

      - name: Build HtmlToPng tool
        run: dotnet build tools/HtmlToPng/HtmlToPng.csproj -c Release

      - name: Install Playwright browsers
        run: |
          pwsh -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command "& 'tests/Examples.Tests.UI/bin/Debug/net8.0/playwright.ps1' install --with-deps"

      - name: Render HTML screenshots to PNG
        run: |
          dotnet run --project tools/HtmlToPng/HtmlToPng.csproj -- \
            --input tests/Examples.Tests.UI/bin/Debug/net8.0/screenshots \
            --output coverage-report/screenshots-png \
            --width 900 --height 700

      - name: Upload screenshots as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-screenshots
          path: tests/Examples.Tests.UI/bin/Debug/net8.0/screenshots/
          retention-days: 30

      - name: Upload PNG screenshots as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-screenshots-png
          path: coverage-report/screenshots-png/
          retention-days: 30

      - name: Aggregate coverage summary
        run: pwsh -NoProfile -ExecutionPolicy Bypass -File ./scripts/aggregate_coverage.ps1

      - name: Generate enhanced HTML coverage report
        run: pwsh -NoProfile -NonInteractive -ExecutionPolicy Bypass -File ./scripts/generate_coverage_html.ps1

      - name: Generate SVG coverage summary
        run: pwsh -NoProfile -NonInteractive -ExecutionPolicy Bypass -File ./scripts/generate_coverage_svg.ps1

      - name: Copy screenshots to coverage report
        run: |
          mkdir -p coverage-report/screenshots
          if [ -d "tests/Examples.Tests.UI/bin/Debug/net8.0/screenshots" ]; then
            cp -r tests/Examples.Tests.UI/bin/Debug/net8.0/screenshots/* coverage-report/screenshots/ || true
          fi
          if [ -d "coverage-report/screenshots-png" ]; then
            mkdir -p coverage-report/screenshots-png
          fi

      - name: Generate screenshot gallery HTML
        run: pwsh -NoProfile -NonInteractive -ExecutionPolicy Bypass -File ./scripts/generate_screenshot_gallery.ps1

      - name: Upload coverage report as Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./coverage-report

  deploy:
    needs: test-and-report
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
