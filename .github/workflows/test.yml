name: Test

on:
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: {}

jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-cache-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}

      - name: Restore
        run: dotnet restore DotNetApp.sln

      - name: Build
        run: dotnet build DotNetApp.sln -c Debug --no-restore

      - name: Publish build outputs
        run: |
          dotnet publish src/DotNetApp.Client/DotNetApp.Client.csproj -c Debug -o ./artifacts/client
          dotnet publish src/DotNetApp.Api/DotNetApp.Api.csproj -c Debug -o ./artifacts/api

      - name: Upload API build artifact
        uses: actions/upload-artifact@v4
        with:
          name: api
          path: artifacts/api

      - name: Upload Client build artifact
        uses: actions/upload-artifact@v4
        with:
          name: client
          path: artifacts/client

  run-unit-tests:
    name: Run unit tests
    runs-on: windows-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download API build artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: api
          path: ./downloaded-artifacts/api

      - name: Download Client build artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: client
          path: ./downloaded-artifacts/client

      - name: Run tests
        run: |
          dotnet test tests/DotNetApp.Api.UnitTests/DotNetApp.Api.UnitTests.csproj -c Debug --no-build --verbosity minimal
          dotnet test tests/DotNetApp.Client.UnitTests/DotNetApp.Client.UnitTests.csproj -c Debug --no-build --verbosity minimal

  run-integration-tests:
    name: Run integration tests
    runs-on: ubuntu-latest
    needs: run-unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download API build artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: api
          path: ./downloaded-artifacts/api

      - name: Download Client build artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: client
          path: ./downloaded-artifacts/client

      - name: Build and start services and test containers (use prebuilt artifacts)
        run: |
          # Use the CI compose override which builds api and client images from
          # the downloaded artifacts placed at ./downloaded-artifacts
          docker compose -f docker/docker-compose.yml -f docker/compose.ci.yml up -d --build api client api-integration-tests client-integration-tests e2e-tests

      - name: Run API integration tests
        run: |
          docker compose -f docker/docker-compose.yml exec -T api-integration-tests \
            dotnet test /src/DotNetApp.Api.IntegrationTests -c Debug --no-build || (docker compose -f docker/docker-compose.yml logs --no-color api-integration-tests && exit 1)

      - name: Run Client integration tests
        run: |
          docker compose -f docker/docker-compose.yml exec -T client-integration-tests \
            dotnet test /src/DotNetApp.Client.IntegrationTests -c Debug --no-build || (docker compose -f docker/docker-compose.yml logs --no-color client-integration-tests && exit 1)

      - name: Run E2E tests
        run: |
          docker compose -f docker/docker-compose.yml exec -T e2e-tests \
            dotnet test /src/DotNetApp.E2ETests -c Debug --no-build || (docker compose -f docker/docker-compose.yml logs --no-color e2e-tests && exit 1)

      - name: Tear down compose
        if: always()
        run: |
          docker compose -f docker/docker-compose.yml down -v
